variables:
  PACT_BROKER: http://pactbroker.production.smartbox.com:30336/
  BASE_IMAGE_Stub: docker-registry.production.smartbox.com/millenium-falcon/r2d2mock

unitTests:
  stage: Test
  image: ${BASE_IMAGE}
  needs:
    - composer
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'
  script:
    - phpdbg -qrr vendor/bin/phpunit --testsuite=UnitTests --colors=never
  artifacts:
    expire_in: 1 day
    paths:
      - report/

Api-Tests:
  stage: Test
  image: ${VALIDATION_IMAGE}
  needs:
    - composer
  services:
    - name: mysql:8.0
      alias: mysql
  variables:
    MYSQL_DATABASE: r2d2
    MYSQL_ROOT_PASSWORD: admin123
    MYSQL_USER: root
    DATABASE_URL: "mysql://${MYSQL_USER}:${MYSQL_ROOT_PASSWORD}@mysql/${MYSQL_DATABASE}?serverVersion=8.0"
  script:
    - until bin/console doctrine:database:create -e test --if-not-exists --no-interaction; do sleep 1; done
    - bin/console doctrine:schema:update --force
    - java -jar /schemaspy.jar -dp /mysql/mysql-connector-java-8.0.20.jar -t mysql -o report/html/db -u root -p admin123 -host mysql -db r2d2 -s r2d2 -vizjs -degree 2 -imageformat png
    - phpdbg -qrr vendor/bin/phpunit --testsuite=ApiTests --colors=never --coverage-html report/html/api-tests/ --log-junit report/raw/api-tests/junit.xml --testdox
  artifacts:
    expire_in: 1 day
    paths:
      - report/html/api-tests/
      - report/html/db
      - report/raw/api-tests/

Project-Env-Api-Tests:
  stage: Project Env Validation
  image: ${BASE_IMAGE}
  needs:
    - composer
    - '[DEVINT] Deploy'
    - Post-deploy Health Check
  dependencies:
    - composer
  variables:
    API_TEST_BASE_URL: "http://ie1-devint-r2d2-api-01.z.sbxtest.net"
  script:
    - php vendor/bin/phpunit --testsuite=ApiTests --testdox --no-coverage
  only:
    - master

Pre-deploy Health Check:
  stage: Pre-deploy Health Check
  image: ${BASE_IMAGE}
  script:
    - curl -f http://r2-d2-api-devint.sbxtest.net/_monitor/health/run
  only:
    - master

Post-deploy Health Check:
  stage: Post-deploy Health Check
  image: ${BASE_IMAGE}
  script:
    - curl -f http://r2-d2-api-devint.sbxtest.net/_monitor/health/run
  only:
    - master

.running-r2d2:
  variables:
    DATABASE_URL: "sqlite:////tmp/db.sqlite"
  dependencies:
    - composer
  services:
    - name: ${BASE_IMAGE}
      alias: r2-d2.localhost
      command: ["bash", "-c", 'rm -rf /app; ln -s /builds/millenniumfalcon/r2-d2-api /app; php /builds/millenniumfalcon/r2-d2-api/bin/console doctrine:schema:update --force; chmod 777 /tmp/db.sqlite; /start.sh']
  before_script:
    - sleep 5
  tags:
    - docker

contractTests-against-Stub:
  stage: Test
  image: docker-registry.production.smartbox.com/pact-verifier-curl:latest
  services:
    - name: docker-registry.production.smartbox.com/millenniumfalcon/r2d2-stub
      alias: r2d2-api-stub
  script:
    - cd /app
    - pact-provider-verifier --provider-base-url=http://r2d2-api-stub:8080 --pact-broker-base-url=$PACT_BROKER --provider=R2D2
  tags:
    - docker
  allow_failure: true

contractTests-against-Api:
  stage: Test
  extends: .running-r2d2
  image: docker-registry.production.smartbox.com/pact-verifier-curl:latest
  script:
    - cd /app
    - if [ -z $CI_COMMIT_TAG ] ; then PUBLISH='' ; else PUBLISH="-r --provider-app-version=${CI_COMMIT_TAG%RC*}" ; echo 'Verification is going to be published to Pact Broker' ; fi
    - pact-provider-verifier --provider-base-url=http://r2-d2-api --pact-broker-base-url=$PACT_BROKER --provider=R2D2 $PUBLISH
  allow_failure: true

.load-Tests:
  image: grubykarol/locust
  script:
    - locust -f tests/LoadTests/R2D2Locust.py  --host=http://r2-d2-api/ --no-web -c 1 -r 1 --only-summary --run-time 1m

validate-api-spec-schema:
  stage: Test
  image:
    name: docker-registry.production.smartbox.com/millenniumfalcon/bb-8-api-swagger-cli
    entrypoint: [""]
  script:
    - swagger-cli validate reference/r2d2-api/openapi.yaml

build-R2D2-stub-image:
  stage: Build
  image: docker:dind
  only:
     changes:
       - stub/sandbox/main.js
    - master
    - branches
  script:
    - docker build -t ${BASE_IMAGE_Stub}:latest -f stub/Dockerfile .
    - docker push ${BASE_IMAGE_Stub}:latest

php-cs-fixer:
  stage: Test
  image: ${BASE_IMAGE}
  needs:
    - composer
  script:
    - vendor/bin/php-cs-fixer fix -v --dry-run
