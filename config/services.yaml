imports:
    - { resource: services/logging.yaml }

parameters:
    container.dumper.inline_factories: true
    container.dumper.inline_class_loader: true
    newrelic.application_name: '%env(NR_APPNAME)%'
    newrelic.enable: '%env(bool:NR_ENABLE)%'
    newrelic.api_key: '%env(NR_APIKEY)%'
    clients.quickdata:
        base_uri: '%env(QUICKDATA_URL)%'
    clients.cmhub:
        base_uri: '%env(CMHUB_URL)%'
        auth_basic:
            user: '%env(CMHUB_USER)%'
            password: '%env(CMHUB_PASSWORD)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            Ramsey\Uuid\UuidFactoryInterface: '@Ramsey\Uuid\UuidFactory'

    Monolog\Formatter\LogstashFormatter:
        arguments:
            - '%env(APP_NAME)%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Contract,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\HealthCheck\:
        resource: '../src/HealthCheck'
        tags: ['liip_monitor.check']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Helper\Request\RequestBodyResolver:
        tags:
            - { name: controller.argument_value_resolver, priority: 50 }

    App\Helper\Request\UuidValueResolver:
        tags:
            - { name: controller.argument_value_resolver, priority: 500 }

    App\Helper\Request\RequestQueryResolver:
        tags:
            - { name: controller.argument_value_resolver, priority: 50 }

    App\EventSubscriber\:
        resource: '../src/EventSubscriber'
        tags: ['kernel.event_subscriber']

    App\Messenger\EventListener\MessengerEventsListener:
        class: App\Messenger\EventListener\MessengerEventsListener
        tags: ['kernel.event_subscriber']

    Nelmio\ApiDocBundle\ApiDocGenerator: '@nelmio_api_doc.generator.default'

    Gedmo\Timestampable\TimestampableListener:
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    App\Helper\Serializer\StrictIntegerHandler:
        tags:
            - { name: jms_serializer.subscribing_handler }

    App\Helper\Serializer\StrictBooleanHandler:
        tags:
            - { name: jms_serializer.subscribing_handler }

    App\Helper\Serializer\CSVHandler:
        tags:
            - { name: jms_serializer.subscribing_handler }

    App\Helper\Serializer\FloatToIntegerHandler:
        tags:
            - { name: jms_serializer.subscribing_handler }

    App\Helper\Feature\AvailabilityConvertFlag:
        arguments:
            - '%feature_flags.availability_convert%'

    App\Helper\Feature\FeatureInterface $availabilityConvertFlag: '@App\Helper\Feature\AvailabilityConvertFlag'

    App\Http\HttpClientFactory: ~

    Ramsey\Uuid\UuidFactory: ~

    App\CMHub\CMHub:
        arguments:
            - '%clients.cmhub%'
            - '@App\Http\HttpClientFactory'

    App\Logger\Processor\:
        resource: '../src/Logger/Processor'
        tags:
            - { name: monolog.processor }

    App\Logger\Processor\EnvironmentNameProcessor:
        arguments:
            - '%env(ENVIRONMENT_NAME)%'
        tags:
            - { name: monolog.processor }

    Smartbox\ApiRestClient\ApiRestInternalClientBuilder: ~

    Smartbox\ApiRestClient\Clients\EaiV0Client:
        factory:   ['@Smartbox\ApiRestClient\ApiRestInternalClientBuilder', createClient]
        arguments:
            - 'Smartbox\ApiRestClient\Clients\EaiV0Client'
            - '%env(APP_EAI_ENV)%'
            - '%env(APP_EAI_USER)%'
            - '%env(APP_EAI_PASSWORD)%'

    Smartbox\ApiRestClient\Clients\ChecksV0Client:
        factory:   ['@Smartbox\ApiRestClient\ApiRestInternalClientBuilder', createClient]
        arguments:
            - 'Smartbox\ApiRestClient\Clients\ChecksV0Client'
            - '%env(APP_EAI_ENV)%'
            - '%env(APP_EAI_USER)%'
            - '%env(APP_EAI_PASSWORD)%'

    App\Contract\Request\EAI\ChannelManagerBookingRequest: ~

    App\Messenger\EventListener\EntityManagerClosedExceptionListener:
        arguments:
            - '@cache.messenger.restart_workers_signal'

    App\Messenger\RetryCustomStrategy: ~
