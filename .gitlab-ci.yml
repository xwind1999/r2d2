stages:
  - Build base image
  - Build
  - Unit tests
  - Contract tests
  - Test Coverage Analysis
  - Static analysis
  - Build Reports
  - API Spec Validation
  - Publish Reports

include:
  - local: '/.ci/.gitlab-ci.yaml'

variables:
  GIT_DEPTH: 1
  PACT_BROKER: http://10.10.0.234:32584/

composer:
  stage: Build
  image: ${BASE_FULL_IMAGE}
  cache:
    key:
      files:
        - composer.lock
        - symfony.lock
    paths:
      - cache/composer
  script:
    - /load-key.sh "${SSH_KNOWN_HOSTS}" "${SSH_KEY}"
    - composer config cache-dir cache/composer
    - composer install -n --no-progress
  artifacts:
    expire_in: 1 days
    paths:
      - vendor/
  tags:
    - k8s

phpunit:
  stage: Unit tests
  image: ${BASE_FULL_IMAGE}
  needs:
    - composer
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'
  script:
    - phpdbg -qrr vendor/bin/phpunit --colors=never
  artifacts:
    expire_in: 3 days
    paths:
      - report/
  tags:
    - k8s

.running-r2d2:
  variables:
    MYSQL_DATABASE: r2d2
    MYSQL_ROOT_PASSWORD: admin123
  dependencies:
    - composer
  services:
    - name: docker-registry.production.smartbox.com/millenium-falcon/r2d2-base:0.0.11
      alias: r2-d2-api
      command: ["bash", "-c", 'rm -rf /app; ln -s /builds/millenniumfalcon/r2-d2-api /app; /start.sh']
    - name: mysql:5.7
      alias: r2-d2-mysql
  before_script:
    - sleep 5
    - curl -s http://r2-d2-api

contractTests-against-Stub:
  stage: Contract tests
  image: docker-registry.production.smartbox.com/pact-verifier-curl:latest
  services:
    - name: docker-registry.production.smartbox.com/millenniumfalcon/r2d2-stub
      alias: r2d2-api-stub
  script:
    - cd /app
    - pact-provider-verifier --provider-base-url=http://r2d2-api-stub:8080 --pact-broker-base-url=$PACT_BROKER --provider=R2D2
  tags:
    - docker

contractTests-against-Api:
  stage: Contract tests
  dependencies:
     - composer
  image: docker-registry.production.smartbox.com/pact-verifier-curl:latest
  services:
    - name: docker-registry.production.smartbox.com/millenium-falcon/r2d2-base:0.0.11
      alias: r2-d2-api
      command: ["bash", "-c", 'rm -rf /app; ln -s /builds/millenniumfalcon/r2-d2-api /app; /start.sh']
    - name: mysql:5.7
      alias: r2-d2-mysql
  variables:
    MYSQL_DATABASE: r2d2
    MYSQL_ROOT_PASSWORD: admin123
  script:
    - cd /app
    - if [ -z $CI_COMMIT_TAG ] ; then PUBLISH='' ; else PUBLISH="-r --provider-app-version=${CI_COMMIT_TAG%RC*}" ; echo 'Verification is going to be published to Pact Broker' ; fi
    - pact-provider-verifier --provider-base-url=http://r2-d2-api --pact-broker-base-url=$PACT_BROKER --provider=R2D2 $PUBLISH
  tags:
    - docker
  allow_failure: true

Api-Tests:
  stage: Unit tests
  image: docker-registry.production.smartbox.com/millenniumfalcon/darth-vader-newman
  services:
    - name: docker-registry.production.smartbox.com/millenium-falcon/r2d2-base:0.0.11
      alias: r2-d2-api
      command: ["bash", "-c", 'rm -rf /app; ln -s /builds/millenniumfalcon/r2-d2-api /app; /start.sh']
    - name: mysql:5.7
      alias: r2-d2-mysql
  variables:
    MYSQL_DATABASE: r2d2
    MYSQL_ROOT_PASSWORD: admin123
  tags:
    - docker
  script:
    - newman run tests/ApiTests/R2D2-API.postman_collection.json --environment=tests/ApiTests/R2D2-local.postman_environment.json --reporters cli,htmlextra --reporter-htmlextra-export report/html/newman-report.html
  artifacts:
    when: always
    paths:
      - report/

.load-Tests:
  image: grubykarol/locust
  script:
    - locust -f tests/LoadTests/R2D2Locust.py  --host=http://r2-d2-api/ --no-web -c 1 -r 1 --only-summary --run-time 1m
  tags:
    - k8s

phpstan:
  stage: Static analysis
  image: ${BASE_FULL_IMAGE}
  needs:
    - composer
  script:
    - vendor/bin/phpstan analyse $(pwd)/src --level 8
  tags:
    - k8s

php-cs-fixer:
  stage: Static analysis
  image: ${BASE_FULL_IMAGE}
  needs:
    - composer
  script:
    - vendor/bin/php-cs-fixer fix -v --dry-run
  tags:
    - k8s

phpmetrics:
  stage: Static analysis
  image: ${BASE_FULL_IMAGE}
  needs:
    - composer
  script:
    - vendor/bin/phpmetrics --report-html=report/html/phpmetrics src
  artifacts:
    expire_in: 3 days
    paths:
      - report/
  tags:
    - k8s

sonarqube-early-validation:
  stage: Test Coverage Analysis
  image: docker-registry.production.smartbox.com/web/sonarqube-booking:0.0.1
  needs:
    - phpunit
  script:
    - sonar-scanner -X -Dsonar.analysis.mode=preview -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA
  tags:
    - k8s

sonarqube-report:
  stage: Build Reports
  image: docker-registry.production.smartbox.com/web/sonarqube-booking:0.0.1
  needs:
    - phpunit
    - sonarqube-early-validation
  before_script:
    - 'eval export SQ_BRANCH=$(if [ "$CI_COMMIT_TAG" != "" ]; then echo "releases"; elif [ $CI_COMMIT_REF_NAME == "master" ]; then echo "master"; else echo "branches"; fi);'
    - 'eval export SQ_VERSION=$(if [ "$CI_COMMIT_TAG" != "" ]; then echo $CI_COMMIT_TAG; elif [ $CI_COMMIT_REF_NAME == "master" ]; then echo $CI_COMMIT_SHA; else echo $CI_COMMIT_REF_NAME; fi);'
  script:
    - sonar-scanner -D sonar.branch=$SQ_BRANCH -D sonar.projectVersion=$SQ_VERSION
  tags:
    - k8s

psalm:
  stage: Static analysis
  image: ${BASE_FULL_IMAGE}
  needs:
    - composer
  script:
    - vendor/bin/psalm
  tags:
    - k8s

infection:
  stage: Test Coverage Analysis
  image: ${BASE_FULL_IMAGE}
  dependencies:
    - phpunit
    - composer
  script:
    - phpdbg -qrr vendor/bin/infection --min-covered-msi=80 --only-covered --threads=6 --coverage=report/raw/phpunit/coverage
  artifacts:
    expire_in: 3 days
    paths:
      - report/
  tags:
    - k8s

validate-api-spec-schema:
  stage: API Spec Validation
  image:
    name: docker-registry.production.smartbox.com/millenniumfalcon/bb-8-api-swagger-cli
    entrypoint: [""]
  script:
    - swagger-cli validate reference/r2d2-api/openapi.yaml
  tags:
    - k8s

#notify:
#  stage: Publish API reference
#  image: ${BASE_FULL_IMAGE}
#  variables:
#    BROADCAST_CHANNEL: r2-d2
#    ENVIRONMENT_NAME: r2-d2
#  script:
#    - ${CI_PROJECT_DIR}/.ci/notify.sh
#  tags:
#    - k8s

mermaid-generate-images:
  stage: Build Reports
  image:
    name: jnewland/mermaid.cli
    entrypoint: [""]
  artifacts:
    expire_in: 3 days
    paths:
      - report/
  script:
    - mkdir -p report/html/docs/architecture/diagram/
    - 'cd docs; for flow in architecture/diagram/*.mmd; do node /data/index.bundle.js -i ${flow%%.*}.mmd -o ${flow%%.*}.png; done; cd ..; mv docs/architecture/diagram/*.png report/html/docs/architecture/diagram/;'
    - ls -lah report/html/docs/architecture/diagram/
  only:
    refs:
      - master
      - tags
  tags:
    - k8s
  except:
    - schedules

pages:
  stage: Publish Reports
  image: ${BASE_FULL_IMAGE}
  needs:
    - phpunit
    - phpmetrics
    - infection
    - mermaid-generate-images
    - Api-Tests
  script:
    - rm -rf public/
    - mv report/html/ public/
    - mkdir -p public/reference/
    - mkdir -p public/docs/
    - cp -R reference/* public/reference/
    - cp -R docs/* public/docs/
    - cp docs/html/openapi.html public/reference/r2d2-api/
  artifacts:
    paths:
      - public
    expire_in: 7 days
  tags:
    - k8s
  only:
    - master
