<?php

declare(strict_types=1);

namespace App\Tests\Command\Import;

use App\Command\Import\BookingImportCommand;
use App\Contract\Request\Booking\BookingImport\BookingImportRequest;
use Prophecy\Argument;
use Prophecy\Prophecy\ObjectProphecy;
use Symfony\Component\Console\Tester\CommandTester;

/**
 * @coversDefaultClass \App\Command\Import\BookingImportCommand
 */
class BookingImportCommandTest extends AbstractImportCommandTest
{
    protected ObjectProphecy $partnerRequest;
    protected ObjectProphecy $requestClass;

    protected function setUp(): void
    {
        $this->requestClass = $this->prophesize(BookingImportRequest::class);
        parent::setUp();

        $this->command = new BookingImportCommand(
            $this->logger->reveal(),
            $this->messageBus->reveal(),
            $this->helper->reveal(),
            $this->validator->reveal(),
            $this->serializer->reveal()
        );

        $this->commandTester = new CommandTester($this->command);
        $this->application->add($this->command);
    }

    /**
     * @covers ::__construct
     * @covers ::configure
     * @covers ::execute
     * @covers ::process
     * @covers \App\Contract\Request\Booking\BookingImport\BookingImportRequest
     * @covers \App\Contract\Request\Booking\BookingImport\Guest
     * @dataProvider requestProvider
     */
    public function testExecuteWithInvalidData(\Iterator $bookingImportRequest): void
    {
        $this->executeWithInvalidData($bookingImportRequest);

        $this->assertEquals('r2d2:booking:import', $this->command::getDefaultName());
    }

    /**
     * @covers ::__construct
     * @covers ::configure
     * @covers ::execute
     * @covers ::process
     * @covers \App\Contract\Request\Booking\BookingImport\BookingImportRequest
     * @covers \App\Contract\Request\Booking\BookingImport\Guest
     * @dataProvider requestProvider
     */
    public function testExecuteWithValidData(\Iterator $bookingImportRequest): void
    {
        $this->executeWithValidData($bookingImportRequest);

        $this->assertEquals('r2d2:booking:import', $this->command::getDefaultName());
        $this->messageBus
            ->dispatch(Argument::type(BookingImportRequest::class))
            ->shouldBeCalledTimes(count($bookingImportRequest));
    }

    public function requestProvider(): ?\Generator
    {
        $records = new \ArrayIterator([
            [
                'goldenId' => '16503',
                'boxId' => '16503',
                'experienceId' => '16503',
                'experiencePrice' => '1650',
                'voucher' => '555444333',
                'currency' => 'EUR',
                'arrivalDate' => '2020-01-01 12:00:00',
                'endDate' => '2020-01-02 12:00:00',
                'additionalComment' => 'i would like a sea view, please',
                'customerData' => '0x1F8B08000000000004006D904B6BC2401485CF4F916EAB41939AAA2B0BDD74E1AEBB223298A88198943CA0A5F8DFFB6572190A95615EF77EF79C99FBA3077DAA51AE930A7D71DB30774422F6297388376AD5A992D31572645E54726E198E4C06E3ACA2E4F49F7FE534F1B99E6C6D6C0EE170288D72A6DAB1969E5EEB89F9ACADCE818D7444E16A1A239BF38F0BD12A383E2AA132F16BAA582B94629452AB1B347AF88EB77F5BCD9BDEEF660FFE9E05EDBF5CEFDF5BFBBF369005DC482DB4C46F8EE31AF7B95538F299EFF9D0BD81FCD03E74AEE29F3DFB397815A8CFCCF1A65F02A11B60B2010000',
                'components' => '0x
                'roomPrice' => '400.00;1650',
                'roomType' => 'extra_night;oob',
                'beginRoomDate' => '2020-01-01 00:00:00;2020-01-01 00:00:00',
                'endRoomDate' => '2020-01-02 12:00:00;2020-01-02 00:00:00',
            ],
            [
                'goldenId' => '54302',
                'boxId' => '54302',
                'experienceId' => '54302',
                'experiencePrice' => '54302',
                'voucher' => '555444333',
                'currency' => 'EUR',
                'arrivalDate' => '2020-02-02 12:00:00',
                'endDate' => '2020-03-05 12:00:00',
                'additionalComment' => 'i would like a sea view, please',
                'customerData' => '0x1F8B08000000000004006D904B6BC2401485CF4F916EAB41939AAA2B0BDD74E1AEBB223298A88198943CA0A5F8DFFB6572190A95615EF77EF79C99FBA3077DAA51AE930A7D71DB30774422F6297388376AD5A992D31572645E54726E198E4C06E3ACA2E4F49F7FE534F1B99E6C6D6C0EE170288D72A6DAB1969E5EEB89F9ACADCE818D7444E16A1A239BF38F0BD12A383E2AA132F16BAA582B94629452AB1B347AF88EB77F5BCD9BDEEF660FFE9E05EDBF5CEFDF5BFBBF369005DC482DB4C46F8EE31AF7B95538F299EFF9D0BD81FCD03E74AEE29F3DFB397815A8CFCCF1A65F02A11B60B2010000',
                'components' => '0x
                'roomPrice' => '',
                'roomType' => '',
                'beginRoomDate' => '',
                'endRoomDate' => '',
            ],
        ]);

        yield [$records];
    }

    public function requestProviderInvalidData(): ?\Generator
    {
        $records = new \ArrayIterator([
            [
                'id' => '9999999999999999999999',
                'type' => 'partner',
                'partnerCeaseDate' => new \DateTime('now'),
                'isChannelManagerEnabled' => '',
                'updatedAt' => '2020-01-01 00:00:00',
            ],
            [
                'id' => '9999999999999999999999',
                'type' => 'partner',
                'partnerCeaseDate' => null,
                'isChannelManagerEnabled' => '',
                'updatedAt' => '2020-01-01 00:00:00',
            ],
            [
                'id' => '9999999999999999999999',
                'type' => 'partner',
                'partnerCeaseDate' => null,
                'isChannelManagerEnabled' => '',
                'updatedAt' => null,
            ],
        ]);

        yield [$records];
    }

    /**
     * @covers::configure
     */
    public function testConfigureOutput()
    {
        $definition = $this->command->getDefinition();

        $this->assertEquals('Command to push CSV booking to the queue', $this->command->getDescription());
        $this->assertArrayHasKey('file', $definition->getArguments());
        $this->assertEquals('CSV file path', $definition->getArgument('file')->getDescription());
    }
}
